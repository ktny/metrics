[tools]
uv = "0.8.17"

[tasks]
setup = { description = "Deps(frozen) + git hooks", run = "uv sync --frozen && uv run pre-commit install --install-hooks --hook-type pre-commit --hook-type pre-push" }
dev = { description = "Run app", run = "uv run streamlit run app.py" }
sample = { description = "Generate 7-day dummy SAR under logs/sample/saYYYYMMDD", run = "bash -lc 'set -e; ROOT=logs/sample; mkdir -p \"$ROOT\"; BASE=\"$ROOT/sa_base\"; if command -v sar >/dev/null; then sar -o \"$BASE\" 1 1 >/dev/null; echo \"Created base via sar: $BASE\"; elif [ -f samples/sar_v12.dat ]; then cp -f samples/sar_v12.dat \"$BASE\"; echo \"Copied samples/sar_v12.dat as base: $BASE\"; else echo \"No sar binary and no samples/sar_v12.dat available\"; exit 1; fi; for i in $(seq 0 6); do D=$(date -d \"-$i day\" +%Y%m%d); cp -f \"$BASE\" \"$ROOT/sa$D\"; echo \"Wrote $ROOT/sa$D\"; done'" }
fmt = { description = "Format code", run = "uv run ruff format ." }
lint = { description = "Lint code", run = "uv run ruff check ." }
fix = { description = "Apply lint fixes", run = "uv run ruff check . --fix" }
type = { description = "Type-check", run = "uv run pyright" }
check = { description = "Format(check)+Lint+Type", run = "uv run ruff format --check . && uv run ruff check . && uv run pyright" }
test = { description = "Run tests", run = "uv run pytest -q" }
clean = { description = "Clean artifacts (logs + caches)", run = "bash -lc 'rm -rf logs/* 2>/dev/null || true; find . -name __pycache__ -type d -exec rm -rf {} +'" }
precommit = { description = "Run pre-commit all", run = "uv run pre-commit run --all-files" }
